// Generated by gencpp from file traj_utils/SteamdeckInfo.msg
// DO NOT EDIT!


#ifndef TRAJ_UTILS_MESSAGE_STEAMDECKINFO_H
#define TRAJ_UTILS_MESSAGE_STEAMDECKINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <traj_utils/FormationId.h>

namespace traj_utils
{
template <class ContainerAllocator>
struct SteamdeckInfo_
{
  typedef SteamdeckInfo_<ContainerAllocator> Type;

  SteamdeckInfo_()
    : traj_start_trigger()
    , formation_ids()  {
    }
  SteamdeckInfo_(const ContainerAllocator& _alloc)
    : traj_start_trigger(_alloc)
    , formation_ids(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _traj_start_trigger_type;
  _traj_start_trigger_type traj_start_trigger;

   typedef  ::traj_utils::FormationId_<ContainerAllocator>  _formation_ids_type;
  _formation_ids_type formation_ids;





  typedef boost::shared_ptr< ::traj_utils::SteamdeckInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traj_utils::SteamdeckInfo_<ContainerAllocator> const> ConstPtr;

}; // struct SteamdeckInfo_

typedef ::traj_utils::SteamdeckInfo_<std::allocator<void> > SteamdeckInfo;

typedef boost::shared_ptr< ::traj_utils::SteamdeckInfo > SteamdeckInfoPtr;
typedef boost::shared_ptr< ::traj_utils::SteamdeckInfo const> SteamdeckInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traj_utils::SteamdeckInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traj_utils::SteamdeckInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traj_utils::SteamdeckInfo_<ContainerAllocator1> & lhs, const ::traj_utils::SteamdeckInfo_<ContainerAllocator2> & rhs)
{
  return lhs.traj_start_trigger == rhs.traj_start_trigger &&
    lhs.formation_ids == rhs.formation_ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traj_utils::SteamdeckInfo_<ContainerAllocator1> & lhs, const ::traj_utils::SteamdeckInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traj_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traj_utils::SteamdeckInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_utils::SteamdeckInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::SteamdeckInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::SteamdeckInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::SteamdeckInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::SteamdeckInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traj_utils::SteamdeckInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ed9ffc74ffa217ce2263aeb795f0421";
  }

  static const char* value(const ::traj_utils::SteamdeckInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ed9ffc74ffa217cULL;
  static const uint64_t static_value2 = 0xe2263aeb795f0421ULL;
};

template<class ContainerAllocator>
struct DataType< ::traj_utils::SteamdeckInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_utils/SteamdeckInfo";
  }

  static const char* value(const ::traj_utils::SteamdeckInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traj_utils::SteamdeckInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# command_realted\n"
"geometry_msgs/PoseStamped traj_start_trigger\n"
"traj_utils/FormationId formation_ids\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: traj_utils/FormationId\n"
"int16 drone_formation_id\n"
"int16 car_formation_id\n"
;
  }

  static const char* value(const ::traj_utils::SteamdeckInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traj_utils::SteamdeckInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.traj_start_trigger);
      stream.next(m.formation_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SteamdeckInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traj_utils::SteamdeckInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traj_utils::SteamdeckInfo_<ContainerAllocator>& v)
  {
    s << indent << "traj_start_trigger: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.traj_start_trigger);
    s << indent << "formation_ids: ";
    s << std::endl;
    Printer< ::traj_utils::FormationId_<ContainerAllocator> >::stream(s, indent + "  ", v.formation_ids);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJ_UTILS_MESSAGE_STEAMDECKINFO_H
