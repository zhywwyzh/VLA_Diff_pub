// Generated by gencpp from file traj_utils/SwarmGlobalPathList.msg
// DO NOT EDIT!


#ifndef TRAJ_UTILS_MESSAGE_SWARMGLOBALPATHLIST_H
#define TRAJ_UTILS_MESSAGE_SWARMGLOBALPATHLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace traj_utils
{
template <class ContainerAllocator>
struct SwarmGlobalPathList_
{
  typedef SwarmGlobalPathList_<ContainerAllocator> Type;

  SwarmGlobalPathList_()
    : guard_drone_id(0)
    , path_num(0)
    , swarm_global_path_x()
    , swarm_global_path_y()
    , swarm_global_path_z()  {
    }
  SwarmGlobalPathList_(const ContainerAllocator& _alloc)
    : guard_drone_id(0)
    , path_num(0)
    , swarm_global_path_x(_alloc)
    , swarm_global_path_y(_alloc)
    , swarm_global_path_z(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _guard_drone_id_type;
  _guard_drone_id_type guard_drone_id;

   typedef int16_t _path_num_type;
  _path_num_type path_num;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _swarm_global_path_x_type;
  _swarm_global_path_x_type swarm_global_path_x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _swarm_global_path_y_type;
  _swarm_global_path_y_type swarm_global_path_y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _swarm_global_path_z_type;
  _swarm_global_path_z_type swarm_global_path_z;





  typedef boost::shared_ptr< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> const> ConstPtr;

}; // struct SwarmGlobalPathList_

typedef ::traj_utils::SwarmGlobalPathList_<std::allocator<void> > SwarmGlobalPathList;

typedef boost::shared_ptr< ::traj_utils::SwarmGlobalPathList > SwarmGlobalPathListPtr;
typedef boost::shared_ptr< ::traj_utils::SwarmGlobalPathList const> SwarmGlobalPathListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traj_utils::SwarmGlobalPathList_<ContainerAllocator1> & lhs, const ::traj_utils::SwarmGlobalPathList_<ContainerAllocator2> & rhs)
{
  return lhs.guard_drone_id == rhs.guard_drone_id &&
    lhs.path_num == rhs.path_num &&
    lhs.swarm_global_path_x == rhs.swarm_global_path_x &&
    lhs.swarm_global_path_y == rhs.swarm_global_path_y &&
    lhs.swarm_global_path_z == rhs.swarm_global_path_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traj_utils::SwarmGlobalPathList_<ContainerAllocator1> & lhs, const ::traj_utils::SwarmGlobalPathList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traj_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbec33be88bdc3b63831bb888227e0c1";
  }

  static const char* value(const ::traj_utils::SwarmGlobalPathList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbec33be88bdc3b6ULL;
  static const uint64_t static_value2 = 0x3831bb888227e0c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_utils/SwarmGlobalPathList";
  }

  static const char* value(const ::traj_utils::SwarmGlobalPathList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 guard_drone_id\n"
"int16 path_num\n"
"\n"
"float32[] swarm_global_path_x\n"
"float32[] swarm_global_path_y\n"
"float32[] swarm_global_path_z\n"
;
  }

  static const char* value(const ::traj_utils::SwarmGlobalPathList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.guard_drone_id);
      stream.next(m.path_num);
      stream.next(m.swarm_global_path_x);
      stream.next(m.swarm_global_path_y);
      stream.next(m.swarm_global_path_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SwarmGlobalPathList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traj_utils::SwarmGlobalPathList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traj_utils::SwarmGlobalPathList_<ContainerAllocator>& v)
  {
    s << indent << "guard_drone_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.guard_drone_id);
    s << indent << "path_num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.path_num);
    s << indent << "swarm_global_path_x[]" << std::endl;
    for (size_t i = 0; i < v.swarm_global_path_x.size(); ++i)
    {
      s << indent << "  swarm_global_path_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.swarm_global_path_x[i]);
    }
    s << indent << "swarm_global_path_y[]" << std::endl;
    for (size_t i = 0; i < v.swarm_global_path_y.size(); ++i)
    {
      s << indent << "  swarm_global_path_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.swarm_global_path_y[i]);
    }
    s << indent << "swarm_global_path_z[]" << std::endl;
    for (size_t i = 0; i < v.swarm_global_path_z.size(); ++i)
    {
      s << indent << "  swarm_global_path_z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.swarm_global_path_z[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJ_UTILS_MESSAGE_SWARMGLOBALPATHLIST_H
