// Generated by gencpp from file traj_utils/drone_state_to_steamdeck.msg
// DO NOT EDIT!


#ifndef TRAJ_UTILS_MESSAGE_DRONE_STATE_TO_STEAMDECK_H
#define TRAJ_UTILS_MESSAGE_DRONE_STATE_TO_STEAMDECK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace traj_utils
{
template <class ContainerAllocator>
struct drone_state_to_steamdeck_
{
  typedef drone_state_to_steamdeck_<ContainerAllocator> Type;

  drone_state_to_steamdeck_()
    : drone_id(0)
    , start_time()
    , current_node_state(0)
    , debug_info()  {
    }
  drone_state_to_steamdeck_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , start_time()
    , current_node_state(0)
    , debug_info(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _drone_id_type;
  _drone_id_type drone_id;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef int8_t _current_node_state_type;
  _current_node_state_type current_node_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _debug_info_type;
  _debug_info_type debug_info;





  typedef boost::shared_ptr< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> const> ConstPtr;

}; // struct drone_state_to_steamdeck_

typedef ::traj_utils::drone_state_to_steamdeck_<std::allocator<void> > drone_state_to_steamdeck;

typedef boost::shared_ptr< ::traj_utils::drone_state_to_steamdeck > drone_state_to_steamdeckPtr;
typedef boost::shared_ptr< ::traj_utils::drone_state_to_steamdeck const> drone_state_to_steamdeckConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator1> & lhs, const ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id == rhs.drone_id &&
    lhs.start_time == rhs.start_time &&
    lhs.current_node_state == rhs.current_node_state &&
    lhs.debug_info == rhs.debug_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator1> & lhs, const ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traj_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d799a4895f8a152d4ada9c7313ecec9b";
  }

  static const char* value(const ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd799a4895f8a152dULL;
  static const uint64_t static_value2 = 0x4ada9c7313ecec9bULL;
};

template<class ContainerAllocator>
struct DataType< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_utils/drone_state_to_steamdeck";
  }

  static const char* value(const ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 drone_id\n"
"# 1: baseFail (vins_odom too low or no odom)\n"
"# 2: basepreparing\n"
"# 3: baseReady\n"
"# 4: px4_take_off\n"
"# 5: command\n"
"# 6: px4_land\n"
"# 7: auto_hover\n"
"# 8: locatizationError (optical_flow)\n"
"# 9: crash (cmd ---> stopPropeller) \n"
"# 10: drone_node_only\n"
"# 11: timeAlignFail\n"
"time start_time\n"
"int8 current_node_state\n"
"string debug_info\n"
;
  }

  static const char* value(const ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.start_time);
      stream.next(m.current_node_state);
      stream.next(m.debug_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct drone_state_to_steamdeck_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traj_utils::drone_state_to_steamdeck_<ContainerAllocator>& v)
  {
    s << indent << "drone_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "current_node_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.current_node_state);
    s << indent << "debug_info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.debug_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJ_UTILS_MESSAGE_DRONE_STATE_TO_STEAMDECK_H
