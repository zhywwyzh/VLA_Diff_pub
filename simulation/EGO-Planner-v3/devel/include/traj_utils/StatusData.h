// Generated by gencpp from file traj_utils/StatusData.msg
// DO NOT EDIT!


#ifndef TRAJ_UTILS_MESSAGE_STATUSDATA_H
#define TRAJ_UTILS_MESSAGE_STATUSDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace traj_utils
{
template <class ContainerAllocator>
struct StatusData_
{
  typedef StatusData_<ContainerAllocator> Type;

  StatusData_()
    : header()
    , drone_id(0)
    , loop_rate(0)
    , voltage(0.0)
    , seq(0)
    , dead(0)
    , dead_pos()
    , dead_vel()  {
    }
  StatusData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , drone_id(0)
    , loop_rate(0)
    , voltage(0.0)
    , seq(0)
    , dead(0)
    , dead_pos(_alloc)
    , dead_vel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _drone_id_type;
  _drone_id_type drone_id;

   typedef uint16_t _loop_rate_type;
  _loop_rate_type loop_rate;

   typedef double _voltage_type;
  _voltage_type voltage;

   typedef uint8_t _seq_type;
  _seq_type seq;

   typedef uint8_t _dead_type;
  _dead_type dead;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _dead_pos_type;
  _dead_pos_type dead_pos;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _dead_vel_type;
  _dead_vel_type dead_vel;





  typedef boost::shared_ptr< ::traj_utils::StatusData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traj_utils::StatusData_<ContainerAllocator> const> ConstPtr;

}; // struct StatusData_

typedef ::traj_utils::StatusData_<std::allocator<void> > StatusData;

typedef boost::shared_ptr< ::traj_utils::StatusData > StatusDataPtr;
typedef boost::shared_ptr< ::traj_utils::StatusData const> StatusDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traj_utils::StatusData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traj_utils::StatusData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traj_utils::StatusData_<ContainerAllocator1> & lhs, const ::traj_utils::StatusData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.drone_id == rhs.drone_id &&
    lhs.loop_rate == rhs.loop_rate &&
    lhs.voltage == rhs.voltage &&
    lhs.seq == rhs.seq &&
    lhs.dead == rhs.dead &&
    lhs.dead_pos == rhs.dead_pos &&
    lhs.dead_vel == rhs.dead_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traj_utils::StatusData_<ContainerAllocator1> & lhs, const ::traj_utils::StatusData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traj_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traj_utils::StatusData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_utils::StatusData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::StatusData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::StatusData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::StatusData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::StatusData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traj_utils::StatusData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fb7b2c8a913bcd9ee73aff94ba73e8f1";
  }

  static const char* value(const ::traj_utils::StatusData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfb7b2c8a913bcd9eULL;
  static const uint64_t static_value2 = 0xe73aff94ba73e8f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::traj_utils::StatusData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_utils/StatusData";
  }

  static const char* value(const ::traj_utils::StatusData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traj_utils::StatusData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 drone_id\n"
"uint16 loop_rate\n"
"float64 voltage\n"
"uint8 seq\n"
"uint8 dead\n"
"geometry_msgs/Point dead_pos\n"
"geometry_msgs/Point dead_vel\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::traj_utils::StatusData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traj_utils::StatusData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.drone_id);
      stream.next(m.loop_rate);
      stream.next(m.voltage);
      stream.next(m.seq);
      stream.next(m.dead);
      stream.next(m.dead_pos);
      stream.next(m.dead_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StatusData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traj_utils::StatusData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traj_utils::StatusData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "drone_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "loop_rate: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.loop_rate);
    s << indent << "voltage: ";
    Printer<double>::stream(s, indent + "  ", v.voltage);
    s << indent << "seq: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.seq);
    s << indent << "dead: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dead);
    s << indent << "dead_pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.dead_pos);
    s << indent << "dead_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.dead_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJ_UTILS_MESSAGE_STATUSDATA_H
