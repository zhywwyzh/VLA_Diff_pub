// Generated by gencpp from file traj_utils/LocalTime.msg
// DO NOT EDIT!


#ifndef TRAJ_UTILS_MESSAGE_LOCALTIME_H
#define TRAJ_UTILS_MESSAGE_LOCALTIME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace traj_utils
{
template <class ContainerAllocator>
struct LocalTime_
{
  typedef LocalTime_<ContainerAllocator> Type;

  LocalTime_()
    : drone_id(0)
    , start_time()
    , no_syc(false)  {
    }
  LocalTime_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , start_time()
    , no_syc(false)  {
  (void)_alloc;
    }



   typedef int16_t _drone_id_type;
  _drone_id_type drone_id;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef uint8_t _no_syc_type;
  _no_syc_type no_syc;





  typedef boost::shared_ptr< ::traj_utils::LocalTime_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traj_utils::LocalTime_<ContainerAllocator> const> ConstPtr;

}; // struct LocalTime_

typedef ::traj_utils::LocalTime_<std::allocator<void> > LocalTime;

typedef boost::shared_ptr< ::traj_utils::LocalTime > LocalTimePtr;
typedef boost::shared_ptr< ::traj_utils::LocalTime const> LocalTimeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traj_utils::LocalTime_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traj_utils::LocalTime_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traj_utils::LocalTime_<ContainerAllocator1> & lhs, const ::traj_utils::LocalTime_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id == rhs.drone_id &&
    lhs.start_time == rhs.start_time &&
    lhs.no_syc == rhs.no_syc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traj_utils::LocalTime_<ContainerAllocator1> & lhs, const ::traj_utils::LocalTime_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traj_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traj_utils::LocalTime_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_utils::LocalTime_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::LocalTime_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::LocalTime_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::LocalTime_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::LocalTime_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traj_utils::LocalTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2012c91cb1df9e8be07a80d63f630a55";
  }

  static const char* value(const ::traj_utils::LocalTime_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2012c91cb1df9e8bULL;
  static const uint64_t static_value2 = 0xe07a80d63f630a55ULL;
};

template<class ContainerAllocator>
struct DataType< ::traj_utils::LocalTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_utils/LocalTime";
  }

  static const char* value(const ::traj_utils::LocalTime_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traj_utils::LocalTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 drone_id\n"
"time start_time\n"
"bool no_syc\n"
;
  }

  static const char* value(const ::traj_utils::LocalTime_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traj_utils::LocalTime_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.start_time);
      stream.next(m.no_syc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalTime_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traj_utils::LocalTime_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traj_utils::LocalTime_<ContainerAllocator>& v)
  {
    s << indent << "drone_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "no_syc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.no_syc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJ_UTILS_MESSAGE_LOCALTIME_H
