// Generated by gencpp from file quadrotor_msgs/PerceptionMsg.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_PERCEPTIONMSG_H
#define QUADROTOR_MSGS_MESSAGE_PERCEPTIONMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <quadrotor_msgs/MultiPoseGraph.h>
#include <quadrotor_msgs/HgridMsg.h>
#include <quadrotor_msgs/FrontierMsg.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct PerceptionMsg_
{
  typedef PerceptionMsg_<ContainerAllocator> Type;

  PerceptionMsg_()
    : header()
    , from_drone_id(0)
    , to_drone_id(0)
    , req_or_resp(0)
    , msg_type(0)
    , posegraph_msg()
    , hgrid_msg()
    , ftr_msg()  {
    }
  PerceptionMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , from_drone_id(0)
    , to_drone_id(0)
    , req_or_resp(0)
    , msg_type(0)
    , posegraph_msg(_alloc)
    , hgrid_msg(_alloc)
    , ftr_msg(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _from_drone_id_type;
  _from_drone_id_type from_drone_id;

   typedef uint16_t _to_drone_id_type;
  _to_drone_id_type to_drone_id;

   typedef uint8_t _req_or_resp_type;
  _req_or_resp_type req_or_resp;

   typedef uint8_t _msg_type_type;
  _msg_type_type msg_type;

   typedef  ::quadrotor_msgs::MultiPoseGraph_<ContainerAllocator>  _posegraph_msg_type;
  _posegraph_msg_type posegraph_msg;

   typedef  ::quadrotor_msgs::HgridMsg_<ContainerAllocator>  _hgrid_msg_type;
  _hgrid_msg_type hgrid_msg;

   typedef  ::quadrotor_msgs::FrontierMsg_<ContainerAllocator>  _ftr_msg_type;
  _ftr_msg_type ftr_msg;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DATA_NEED_MAP_MERGE)
  #undef DATA_NEED_MAP_MERGE
#endif
#if defined(_WIN32) && defined(DATA_NEED_MAP_RESET)
  #undef DATA_NEED_MAP_RESET
#endif
#if defined(_WIN32) && defined(RESPONSE_MSG_FALG)
  #undef RESPONSE_MSG_FALG
#endif
#if defined(_WIN32) && defined(REQUESET_MSG_FLAG)
  #undef REQUESET_MSG_FLAG
#endif

  enum {
    DATA_NEED_MAP_MERGE = 1u,
    DATA_NEED_MAP_RESET = 2u,
    RESPONSE_MSG_FALG = 2u,
    REQUESET_MSG_FLAG = 1u,
  };


  typedef boost::shared_ptr< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> const> ConstPtr;

}; // struct PerceptionMsg_

typedef ::quadrotor_msgs::PerceptionMsg_<std::allocator<void> > PerceptionMsg;

typedef boost::shared_ptr< ::quadrotor_msgs::PerceptionMsg > PerceptionMsgPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::PerceptionMsg const> PerceptionMsgConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.from_drone_id == rhs.from_drone_id &&
    lhs.to_drone_id == rhs.to_drone_id &&
    lhs.req_or_resp == rhs.req_or_resp &&
    lhs.msg_type == rhs.msg_type &&
    lhs.posegraph_msg == rhs.posegraph_msg &&
    lhs.hgrid_msg == rhs.hgrid_msg &&
    lhs.ftr_msg == rhs.ftr_msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1dcaf3ff09d27642f7d2a9908eb37ead";
  }

  static const char* value(const ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1dcaf3ff09d27642ULL;
  static const uint64_t static_value2 = 0xf7d2a9908eb37eadULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/PerceptionMsg";
  }

  static const char* value(const ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# -------------------\n"
"uint16 from_drone_id\n"
"uint16 to_drone_id\n"
"uint8 req_or_resp\n"
"uint8 msg_type\n"
"MultiPoseGraph posegraph_msg\n"
"HgridMsg hgrid_msg\n"
"FrontierMsg ftr_msg\n"
"\n"
"uint8 DATA_NEED_MAP_MERGE = 1\n"
"uint8 DATA_NEED_MAP_RESET = 2\n"
"uint8 RESPONSE_MSG_FALG = 2\n"
"uint8 REQUESET_MSG_FLAG = 1\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: quadrotor_msgs/MultiPoseGraph\n"
"Header header\n"
"#  --- only support single pose graph for now --- #\n"
"geometry_msgs/Point[] key_pose_list_xyz\n"
"float32[] key_pose_list_intensity\n"
"\n"
"# p_start no need to tans, because it is bind with keypoint sequences\n"
"std_msgs/UInt16MultiArray[] pose_edge_p_end\n"
"std_msgs/Float32MultiArray[] pose_edge_weight\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt16MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"uint16[]            data        # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: std_msgs/Float32MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float32[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: quadrotor_msgs/HgridMsg\n"
"Header header\n"
"bool recv\n"
"\n"
"# every single grid data (GridInfo)\n"
"uint16[] id\n"
"uint16[] local_id\n"
"uint16[] unknown_num  #\n"
"uint16[] frontier_num # no use\n"
"geometry_msgs/Point[] center\n"
"std_msgs/UInt16MultiArray[] frontier_cell_nums\n"
"std_msgs/UInt16MultiArray[] contained_frontier_ids\n"
"bool[] is_updated\n"
"bool[] need_divide\n"
"bool[] active\n"
"bool[] is_prev_relevant\n"
"bool[] is_cur_relevant\n"
"bool[] is_covered\n"
"\n"
"# multy grid data (UniformGrid)\n"
"std_msgs/UInt16MultiArray relevant_id\n"
"std_msgs/UInt16MultiArray relevant_map\n"
"geometry_msgs/Point min\n"
"geometry_msgs/Point max\n"
"geometry_msgs/Point resolution\n"
"float32 grid_size\n"
"bool multi_layer_hgrid\n"
"\n"
"\n"
"================================================================================\n"
"MSG: quadrotor_msgs/FrontierMsg\n"
"Header header\n"
"# -----------------------\n"
"FtrPointArray[] cells\n"
"FtrPointArray[] filtered_cells\n"
"geometry_msgs/Point[] average\n"
"geometry_msgs/Point[] normal\n"
"uint16[] id\n"
"uint16[] keypose_idx\n"
"# view points for each frontier\n"
"FtrPointArray[] viewpoints_pos\n"
"std_msgs/Float32MultiArray[] viewpoints_yaw\n"
"std_msgs/UInt16MultiArray[] viewpoints_visib_num\n"
"geometry_msgs/Point[] box_min_\n"
"geometry_msgs/Point[] box_max_\n"
"# path & costs between frontiers\n"
"FtrPathArray[] paths\n"
"std_msgs/Float32MultiArray[] costs\n"
"FtrPointArray[] path_to_home_3   # (x, y, z, state)\n"
"std_msgs/Float32MultiArray[] path_to_home_4\n"
"float32[] cost_to_home# (x, y, z, state)\n"
"std_msgs/UInt16MultiArray[] topo_blacklist\n"
"# frontier blacklist (can't reach)\n"
"geometry_msgs/Point[] ftr_blacklist\n"
"================================================================================\n"
"MSG: quadrotor_msgs/FtrPointArray\n"
"geometry_msgs/Point[] PointArray\n"
"================================================================================\n"
"MSG: quadrotor_msgs/FtrPathArray\n"
"FtrPointArray[] PathArray\n"
;
  }

  static const char* value(const ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.from_drone_id);
      stream.next(m.to_drone_id);
      stream.next(m.req_or_resp);
      stream.next(m.msg_type);
      stream.next(m.posegraph_msg);
      stream.next(m.hgrid_msg);
      stream.next(m.ftr_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PerceptionMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::PerceptionMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "from_drone_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.from_drone_id);
    s << indent << "to_drone_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.to_drone_id);
    s << indent << "req_or_resp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.req_or_resp);
    s << indent << "msg_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msg_type);
    s << indent << "posegraph_msg: ";
    s << std::endl;
    Printer< ::quadrotor_msgs::MultiPoseGraph_<ContainerAllocator> >::stream(s, indent + "  ", v.posegraph_msg);
    s << indent << "hgrid_msg: ";
    s << std::endl;
    Printer< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.hgrid_msg);
    s << indent << "ftr_msg: ";
    s << std::endl;
    Printer< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.ftr_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_PERCEPTIONMSG_H
