// Generated by gencpp from file quadrotor_msgs/InstructionResMsg.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_INSTRUCTIONRESMSG_H
#define QUADROTOR_MSGS_MESSAGE_INSTRUCTIONRESMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct InstructionResMsg_
{
  typedef InstructionResMsg_<ContainerAllocator> Type;

  InstructionResMsg_()
    : header()
    , instruction_type(0)
    , drone_id(0)
    , is_succeed(false)
    , tar_drone_id()
    , src_drone_id()
    , failed_drone_id()  {
    }
  InstructionResMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , instruction_type(0)
    , drone_id(0)
    , is_succeed(false)
    , tar_drone_id(_alloc)
    , src_drone_id(_alloc)
    , failed_drone_id(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _instruction_type_type;
  _instruction_type_type instruction_type;

   typedef uint8_t _drone_id_type;
  _drone_id_type drone_id;

   typedef uint8_t _is_succeed_type;
  _is_succeed_type is_succeed;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _tar_drone_id_type;
  _tar_drone_id_type tar_drone_id;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _src_drone_id_type;
  _src_drone_id_type src_drone_id;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _failed_drone_id_type;
  _failed_drone_id_type failed_drone_id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TURN_GOAL)
  #undef TURN_GOAL
#endif
#if defined(_WIN32) && defined(TURN_EXPLORE)
  #undef TURN_EXPLORE
#endif
#if defined(_WIN32) && defined(TURN_PATROL)
  #undef TURN_PATROL
#endif
#if defined(_WIN32) && defined(TURN_HIT)
  #undef TURN_HIT
#endif
#if defined(_WIN32) && defined(GO_HOME)
  #undef GO_HOME
#endif
#if defined(_WIN32) && defined(TURN_EGO_GOAL)
  #undef TURN_EGO_GOAL
#endif
#if defined(_WIN32) && defined(SHARE_MAP)
  #undef SHARE_MAP
#endif
#if defined(_WIN32) && defined(RESET_EXPLORE_AREA)
  #undef RESET_EXPLORE_AREA
#endif
#if defined(_WIN32) && defined(MAP_MERGE_REQUEST)
  #undef MAP_MERGE_REQUEST
#endif
#if defined(_WIN32) && defined(MAP_CIRCULATE)
  #undef MAP_CIRCULATE
#endif

  enum {
    TURN_GOAL = 1u,
    TURN_EXPLORE = 2u,
    TURN_PATROL = 3u,
    TURN_HIT = 4u,
    GO_HOME = 5u,
    TURN_EGO_GOAL = 6u,
    SHARE_MAP = 7u,
    RESET_EXPLORE_AREA = 8u,
    MAP_MERGE_REQUEST = 9u,
    MAP_CIRCULATE = 10u,
  };


  typedef boost::shared_ptr< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> const> ConstPtr;

}; // struct InstructionResMsg_

typedef ::quadrotor_msgs::InstructionResMsg_<std::allocator<void> > InstructionResMsg;

typedef boost::shared_ptr< ::quadrotor_msgs::InstructionResMsg > InstructionResMsgPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::InstructionResMsg const> InstructionResMsgConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.instruction_type == rhs.instruction_type &&
    lhs.drone_id == rhs.drone_id &&
    lhs.is_succeed == rhs.is_succeed &&
    lhs.tar_drone_id == rhs.tar_drone_id &&
    lhs.src_drone_id == rhs.src_drone_id &&
    lhs.failed_drone_id == rhs.failed_drone_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ebdd566ae6eb6d7e30fd1625d7dfda91";
  }

  static const char* value(const ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xebdd566ae6eb6d7eULL;
  static const uint64_t static_value2 = 0x30fd1625d7dfda91ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/InstructionResMsg";
  }

  static const char* value(const ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 instruction_type\n"
"uint8 drone_id\n"
"bool is_succeed\n"
"\n"
"# -- map merge and share map -- #\n"
"uint8[] tar_drone_id\n"
"uint8[] src_drone_id\n"
"uint8[] failed_drone_id\n"
"\n"
"# -- instruction type defination-- #\n"
"uint8 TURN_GOAL = 1\n"
"uint8 TURN_EXPLORE = 2\n"
"uint8 TURN_PATROL = 3\n"
"uint8 TURN_HIT = 4\n"
"uint8 GO_HOME = 5\n"
"uint8 TURN_EGO_GOAL = 6\n"
"uint8 SHARE_MAP = 7\n"
"uint8 RESET_EXPLORE_AREA = 8\n"
"uint8 MAP_MERGE_REQUEST = 9\n"
"uint8 MAP_CIRCULATE = 10\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.instruction_type);
      stream.next(m.drone_id);
      stream.next(m.is_succeed);
      stream.next(m.tar_drone_id);
      stream.next(m.src_drone_id);
      stream.next(m.failed_drone_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InstructionResMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::InstructionResMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "instruction_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.instruction_type);
    s << indent << "drone_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "is_succeed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_succeed);
    s << indent << "tar_drone_id[]" << std::endl;
    for (size_t i = 0; i < v.tar_drone_id.size(); ++i)
    {
      s << indent << "  tar_drone_id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.tar_drone_id[i]);
    }
    s << indent << "src_drone_id[]" << std::endl;
    for (size_t i = 0; i < v.src_drone_id.size(); ++i)
    {
      s << indent << "  src_drone_id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.src_drone_id[i]);
    }
    s << indent << "failed_drone_id[]" << std::endl;
    for (size_t i = 0; i < v.failed_drone_id.size(); ++i)
    {
      s << indent << "  failed_drone_id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.failed_drone_id[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_INSTRUCTIONRESMSG_H
