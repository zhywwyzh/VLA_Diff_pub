// Generated by gencpp from file traj_utils/LocalGoal.msg
// DO NOT EDIT!


#ifndef TRAJ_UTILS_MESSAGE_LOCALGOAL_H
#define TRAJ_UTILS_MESSAGE_LOCALGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace traj_utils
{
template <class ContainerAllocator>
struct LocalGoal_
{
  typedef LocalGoal_<ContainerAllocator> Type;

  LocalGoal_()
    : drone_id(0)
    , global_traj_id(0)
    , lg_pos_x(0.0)
    , lg_pos_y(0.0)
    , lg_pos_z(0.0)
    , lg_vel_x(0.0)
    , lg_vel_y(0.0)
    , lg_vel_z(0.0)  {
    }
  LocalGoal_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , global_traj_id(0)
    , lg_pos_x(0.0)
    , lg_pos_y(0.0)
    , lg_pos_z(0.0)
    , lg_vel_x(0.0)
    , lg_vel_y(0.0)
    , lg_vel_z(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _drone_id_type;
  _drone_id_type drone_id;

   typedef int16_t _global_traj_id_type;
  _global_traj_id_type global_traj_id;

   typedef float _lg_pos_x_type;
  _lg_pos_x_type lg_pos_x;

   typedef float _lg_pos_y_type;
  _lg_pos_y_type lg_pos_y;

   typedef float _lg_pos_z_type;
  _lg_pos_z_type lg_pos_z;

   typedef float _lg_vel_x_type;
  _lg_vel_x_type lg_vel_x;

   typedef float _lg_vel_y_type;
  _lg_vel_y_type lg_vel_y;

   typedef float _lg_vel_z_type;
  _lg_vel_z_type lg_vel_z;





  typedef boost::shared_ptr< ::traj_utils::LocalGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traj_utils::LocalGoal_<ContainerAllocator> const> ConstPtr;

}; // struct LocalGoal_

typedef ::traj_utils::LocalGoal_<std::allocator<void> > LocalGoal;

typedef boost::shared_ptr< ::traj_utils::LocalGoal > LocalGoalPtr;
typedef boost::shared_ptr< ::traj_utils::LocalGoal const> LocalGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traj_utils::LocalGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traj_utils::LocalGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traj_utils::LocalGoal_<ContainerAllocator1> & lhs, const ::traj_utils::LocalGoal_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id == rhs.drone_id &&
    lhs.global_traj_id == rhs.global_traj_id &&
    lhs.lg_pos_x == rhs.lg_pos_x &&
    lhs.lg_pos_y == rhs.lg_pos_y &&
    lhs.lg_pos_z == rhs.lg_pos_z &&
    lhs.lg_vel_x == rhs.lg_vel_x &&
    lhs.lg_vel_y == rhs.lg_vel_y &&
    lhs.lg_vel_z == rhs.lg_vel_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traj_utils::LocalGoal_<ContainerAllocator1> & lhs, const ::traj_utils::LocalGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traj_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traj_utils::LocalGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_utils::LocalGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::LocalGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::LocalGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::LocalGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::LocalGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traj_utils::LocalGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8f0ef3ec042e7d8948442e97ca38913";
  }

  static const char* value(const ::traj_utils::LocalGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8f0ef3ec042e7d8ULL;
  static const uint64_t static_value2 = 0x948442e97ca38913ULL;
};

template<class ContainerAllocator>
struct DataType< ::traj_utils::LocalGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_utils/LocalGoal";
  }

  static const char* value(const ::traj_utils::LocalGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traj_utils::LocalGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 drone_id\n"
"int16 global_traj_id\n"
"\n"
"float32 lg_pos_x\n"
"float32 lg_pos_y\n"
"float32 lg_pos_z\n"
"\n"
"float32 lg_vel_x\n"
"float32 lg_vel_y\n"
"float32 lg_vel_z\n"
;
  }

  static const char* value(const ::traj_utils::LocalGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traj_utils::LocalGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.global_traj_id);
      stream.next(m.lg_pos_x);
      stream.next(m.lg_pos_y);
      stream.next(m.lg_pos_z);
      stream.next(m.lg_vel_x);
      stream.next(m.lg_vel_y);
      stream.next(m.lg_vel_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traj_utils::LocalGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traj_utils::LocalGoal_<ContainerAllocator>& v)
  {
    s << indent << "drone_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "global_traj_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.global_traj_id);
    s << indent << "lg_pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.lg_pos_x);
    s << indent << "lg_pos_y: ";
    Printer<float>::stream(s, indent + "  ", v.lg_pos_y);
    s << indent << "lg_pos_z: ";
    Printer<float>::stream(s, indent + "  ", v.lg_pos_z);
    s << indent << "lg_vel_x: ";
    Printer<float>::stream(s, indent + "  ", v.lg_vel_x);
    s << indent << "lg_vel_y: ";
    Printer<float>::stream(s, indent + "  ", v.lg_vel_y);
    s << indent << "lg_vel_z: ";
    Printer<float>::stream(s, indent + "  ", v.lg_vel_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJ_UTILS_MESSAGE_LOCALGOAL_H
