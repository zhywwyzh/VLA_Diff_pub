// Generated by gencpp from file quadrotor_msgs/EgoGoalSet.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_EGOGOALSET_H
#define QUADROTOR_MSGS_MESSAGE_EGOGOALSET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct EgoGoalSet_
{
  typedef EgoGoalSet_<ContainerAllocator> Type;

  EgoGoalSet_()
    : drone_id(0)
    , goal()
    , yaw(0.0)
    , look_forward(false)
    , goal_to_follower(false)  {
      goal.assign(0.0);
  }
  EgoGoalSet_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , goal()
    , yaw(0.0)
    , look_forward(false)
    , goal_to_follower(false)  {
  (void)_alloc;
      goal.assign(0.0);
  }



   typedef uint8_t _drone_id_type;
  _drone_id_type drone_id;

   typedef boost::array<float, 3>  _goal_type;
  _goal_type goal;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef uint8_t _look_forward_type;
  _look_forward_type look_forward;

   typedef uint8_t _goal_to_follower_type;
  _goal_to_follower_type goal_to_follower;





  typedef boost::shared_ptr< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> const> ConstPtr;

}; // struct EgoGoalSet_

typedef ::quadrotor_msgs::EgoGoalSet_<std::allocator<void> > EgoGoalSet;

typedef boost::shared_ptr< ::quadrotor_msgs::EgoGoalSet > EgoGoalSetPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::EgoGoalSet const> EgoGoalSetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id == rhs.drone_id &&
    lhs.goal == rhs.goal &&
    lhs.yaw == rhs.yaw &&
    lhs.look_forward == rhs.look_forward &&
    lhs.goal_to_follower == rhs.goal_to_follower;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e000e06493c05ae8165574a33ffc993";
  }

  static const char* value(const ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e000e06493c05aeULL;
  static const uint64_t static_value2 = 0x8165574a33ffc993ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/EgoGoalSet";
  }

  static const char* value(const ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8      drone_id\n"
"float32[3] goal\n"
"float32    yaw\n"
"bool       look_forward\n"
"bool       goal_to_follower\n"
;
  }

  static const char* value(const ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.goal);
      stream.next(m.yaw);
      stream.next(m.look_forward);
      stream.next(m.goal_to_follower);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EgoGoalSet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::EgoGoalSet_<ContainerAllocator>& v)
  {
    s << indent << "drone_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "goal[]" << std::endl;
    for (size_t i = 0; i < v.goal.size(); ++i)
    {
      s << indent << "  goal[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.goal[i]);
    }
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "look_forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.look_forward);
    s << indent << "goal_to_follower: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.goal_to_follower);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_EGOGOALSET_H
