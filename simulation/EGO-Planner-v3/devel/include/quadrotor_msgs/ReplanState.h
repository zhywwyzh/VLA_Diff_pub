// Generated by gencpp from file quadrotor_msgs/ReplanState.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_REPLANSTATE_H
#define QUADROTOR_MSGS_MESSAGE_REPLANSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nav_msgs/Odometry.h>
#include <quadrotor_msgs/OccMap3d.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct ReplanState_
{
  typedef ReplanState_<ContainerAllocator> Type;

  ReplanState_()
    : header()
    , state(0)
    , iniState()
    , target()
    , occmap()
    , path()
    , replan_stamp()  {
    }
  ReplanState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(0)
    , iniState(_alloc)
    , target(_alloc)
    , occmap(_alloc)
    , path(_alloc)
    , replan_stamp()  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _state_type;
  _state_type state;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _iniState_type;
  _iniState_type iniState;

   typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _target_type;
  _target_type target;

   typedef  ::quadrotor_msgs::OccMap3d_<ContainerAllocator>  _occmap_type;
  _occmap_type occmap;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _path_type;
  _path_type path;

   typedef ros::Time _replan_stamp_type;
  _replan_stamp_type replan_stamp;





  typedef boost::shared_ptr< ::quadrotor_msgs::ReplanState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::ReplanState_<ContainerAllocator> const> ConstPtr;

}; // struct ReplanState_

typedef ::quadrotor_msgs::ReplanState_<std::allocator<void> > ReplanState;

typedef boost::shared_ptr< ::quadrotor_msgs::ReplanState > ReplanStatePtr;
typedef boost::shared_ptr< ::quadrotor_msgs::ReplanState const> ReplanStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::ReplanState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::ReplanState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::ReplanState_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::ReplanState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state &&
    lhs.iniState == rhs.iniState &&
    lhs.target == rhs.target &&
    lhs.occmap == rhs.occmap &&
    lhs.path == rhs.path &&
    lhs.replan_stamp == rhs.replan_stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::ReplanState_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::ReplanState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::ReplanState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::ReplanState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::ReplanState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::ReplanState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::ReplanState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::ReplanState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::ReplanState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1570830519a79cf73ae86c33ac230d3";
  }

  static const char* value(const ::quadrotor_msgs::ReplanState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1570830519a79cfULL;
  static const uint64_t static_value2 = 0x73ae86c33ac230d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::ReplanState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/ReplanState";
  }

  static const char* value(const ::quadrotor_msgs::ReplanState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::ReplanState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# all information for a replan\n"
"\n"
"Header header\n"
"\n"
"int16 state\n"
"float64[] iniState\n"
"nav_msgs/Odometry target\n"
"quadrotor_msgs/OccMap3d occmap\n"
"\n"
"# other temporal variables\n"
"float64[] path\n"
"time replan_stamp\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/Odometry\n"
"# This represents an estimate of a position and velocity in free space.  \n"
"# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n"
"# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n"
"Header header\n"
"string child_frame_id\n"
"geometry_msgs/PoseWithCovariance pose\n"
"geometry_msgs/TwistWithCovariance twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: quadrotor_msgs/OccMap3d\n"
"Header header\n"
"\n"
"float32 resolution\n"
"int16 inflate_size\n"
"int16 size_x\n"
"int16 size_y\n"
"int16 size_z\n"
"int16 offset_x\n"
"int16 offset_y\n"
"int16 offset_z\n"
"\n"
"int8[] data\n"
"float64[] esdf\n"
;
  }

  static const char* value(const ::quadrotor_msgs::ReplanState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::ReplanState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
      stream.next(m.iniState);
      stream.next(m.target);
      stream.next(m.occmap);
      stream.next(m.path);
      stream.next(m.replan_stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReplanState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::ReplanState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::ReplanState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.state);
    s << indent << "iniState[]" << std::endl;
    for (size_t i = 0; i < v.iniState.size(); ++i)
    {
      s << indent << "  iniState[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.iniState[i]);
    }
    s << indent << "target: ";
    s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.target);
    s << indent << "occmap: ";
    s << std::endl;
    Printer< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> >::stream(s, indent + "  ", v.occmap);
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.path[i]);
    }
    s << indent << "replan_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.replan_stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_REPLANSTATE_H
