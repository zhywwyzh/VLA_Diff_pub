// Generated by gencpp from file quadrotor_msgs/GoalSet.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_GOALSET_H
#define QUADROTOR_MSGS_MESSAGE_GOALSET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct GoalSet_
{
  typedef GoalSet_<ContainerAllocator> Type;

  GoalSet_()
    : to_drone_ids()
    , goal()
    , yaw()
    , look_forward(false)
    , goal_to_follower(false)  {
    }
  GoalSet_(const ContainerAllocator& _alloc)
    : to_drone_ids(_alloc)
    , goal(_alloc)
    , yaw(_alloc)
    , look_forward(false)
    , goal_to_follower(false)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _to_drone_ids_type;
  _to_drone_ids_type to_drone_ids;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _goal_type;
  _goal_type goal;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _yaw_type;
  _yaw_type yaw;

   typedef uint8_t _look_forward_type;
  _look_forward_type look_forward;

   typedef uint8_t _goal_to_follower_type;
  _goal_to_follower_type goal_to_follower;





  typedef boost::shared_ptr< ::quadrotor_msgs::GoalSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::GoalSet_<ContainerAllocator> const> ConstPtr;

}; // struct GoalSet_

typedef ::quadrotor_msgs::GoalSet_<std::allocator<void> > GoalSet;

typedef boost::shared_ptr< ::quadrotor_msgs::GoalSet > GoalSetPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::GoalSet const> GoalSetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::GoalSet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::GoalSet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::GoalSet_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::GoalSet_<ContainerAllocator2> & rhs)
{
  return lhs.to_drone_ids == rhs.to_drone_ids &&
    lhs.goal == rhs.goal &&
    lhs.yaw == rhs.yaw &&
    lhs.look_forward == rhs.look_forward &&
    lhs.goal_to_follower == rhs.goal_to_follower;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::GoalSet_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::GoalSet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::GoalSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::GoalSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::GoalSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::GoalSet_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::GoalSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::GoalSet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::GoalSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fce849fd3f9e593aecb0eb34b6f685a3";
  }

  static const char* value(const ::quadrotor_msgs::GoalSet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfce849fd3f9e593aULL;
  static const uint64_t static_value2 = 0xecb0eb34b6f685a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::GoalSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/GoalSet";
  }

  static const char* value(const ::quadrotor_msgs::GoalSet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::GoalSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[]               to_drone_ids\n"
"geometry_msgs/Point[] goal\n"
"float32[]             yaw\n"
"bool                  look_forward\n"
"bool                  goal_to_follower\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::quadrotor_msgs::GoalSet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::GoalSet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.to_drone_ids);
      stream.next(m.goal);
      stream.next(m.yaw);
      stream.next(m.look_forward);
      stream.next(m.goal_to_follower);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoalSet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::GoalSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::GoalSet_<ContainerAllocator>& v)
  {
    s << indent << "to_drone_ids[]" << std::endl;
    for (size_t i = 0; i < v.to_drone_ids.size(); ++i)
    {
      s << indent << "  to_drone_ids[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.to_drone_ids[i]);
    }
    s << indent << "goal[]" << std::endl;
    for (size_t i = 0; i < v.goal.size(); ++i)
    {
      s << indent << "  goal[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.goal[i]);
    }
    s << indent << "yaw[]" << std::endl;
    for (size_t i = 0; i < v.yaw.size(); ++i)
    {
      s << indent << "  yaw[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.yaw[i]);
    }
    s << indent << "look_forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.look_forward);
    s << indent << "goal_to_follower: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.goal_to_follower);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_GOALSET_H
