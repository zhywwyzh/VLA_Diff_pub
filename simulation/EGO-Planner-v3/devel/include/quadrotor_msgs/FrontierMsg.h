// Generated by gencpp from file quadrotor_msgs/FrontierMsg.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_FRONTIERMSG_H
#define QUADROTOR_MSGS_MESSAGE_FRONTIERMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <quadrotor_msgs/FtrPointArray.h>
#include <quadrotor_msgs/FtrPointArray.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <quadrotor_msgs/FtrPointArray.h>
#include <std_msgs/Float32MultiArray.h>
#include <std_msgs/UInt16MultiArray.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <quadrotor_msgs/FtrPathArray.h>
#include <std_msgs/Float32MultiArray.h>
#include <quadrotor_msgs/FtrPointArray.h>
#include <std_msgs/Float32MultiArray.h>
#include <std_msgs/UInt16MultiArray.h>
#include <geometry_msgs/Point.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct FrontierMsg_
{
  typedef FrontierMsg_<ContainerAllocator> Type;

  FrontierMsg_()
    : header()
    , cells()
    , filtered_cells()
    , average()
    , normal()
    , id()
    , keypose_idx()
    , viewpoints_pos()
    , viewpoints_yaw()
    , viewpoints_visib_num()
    , box_min_()
    , box_max_()
    , paths()
    , costs()
    , path_to_home_3()
    , path_to_home_4()
    , cost_to_home()
    , topo_blacklist()
    , ftr_blacklist()  {
    }
  FrontierMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cells(_alloc)
    , filtered_cells(_alloc)
    , average(_alloc)
    , normal(_alloc)
    , id(_alloc)
    , keypose_idx(_alloc)
    , viewpoints_pos(_alloc)
    , viewpoints_yaw(_alloc)
    , viewpoints_visib_num(_alloc)
    , box_min_(_alloc)
    , box_max_(_alloc)
    , paths(_alloc)
    , costs(_alloc)
    , path_to_home_3(_alloc)
    , path_to_home_4(_alloc)
    , cost_to_home(_alloc)
    , topo_blacklist(_alloc)
    , ftr_blacklist(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> >::other >  _cells_type;
  _cells_type cells;

   typedef std::vector< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> >::other >  _filtered_cells_type;
  _filtered_cells_type filtered_cells;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _average_type;
  _average_type average;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _normal_type;
  _normal_type normal;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _id_type;
  _id_type id;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _keypose_idx_type;
  _keypose_idx_type keypose_idx;

   typedef std::vector< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> >::other >  _viewpoints_pos_type;
  _viewpoints_pos_type viewpoints_pos;

   typedef std::vector< ::std_msgs::Float32MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::other >  _viewpoints_yaw_type;
  _viewpoints_yaw_type viewpoints_yaw;

   typedef std::vector< ::std_msgs::UInt16MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::UInt16MultiArray_<ContainerAllocator> >::other >  _viewpoints_visib_num_type;
  _viewpoints_visib_num_type viewpoints_visib_num;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _box_min__type;
  _box_min__type box_min_;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _box_max__type;
  _box_max__type box_max_;

   typedef std::vector< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> >::other >  _paths_type;
  _paths_type paths;

   typedef std::vector< ::std_msgs::Float32MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::other >  _costs_type;
  _costs_type costs;

   typedef std::vector< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> >::other >  _path_to_home_3_type;
  _path_to_home_3_type path_to_home_3;

   typedef std::vector< ::std_msgs::Float32MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::other >  _path_to_home_4_type;
  _path_to_home_4_type path_to_home_4;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cost_to_home_type;
  _cost_to_home_type cost_to_home;

   typedef std::vector< ::std_msgs::UInt16MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::UInt16MultiArray_<ContainerAllocator> >::other >  _topo_blacklist_type;
  _topo_blacklist_type topo_blacklist;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _ftr_blacklist_type;
  _ftr_blacklist_type ftr_blacklist;





  typedef boost::shared_ptr< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> const> ConstPtr;

}; // struct FrontierMsg_

typedef ::quadrotor_msgs::FrontierMsg_<std::allocator<void> > FrontierMsg;

typedef boost::shared_ptr< ::quadrotor_msgs::FrontierMsg > FrontierMsgPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::FrontierMsg const> FrontierMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::FrontierMsg_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::FrontierMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.cells == rhs.cells &&
    lhs.filtered_cells == rhs.filtered_cells &&
    lhs.average == rhs.average &&
    lhs.normal == rhs.normal &&
    lhs.id == rhs.id &&
    lhs.keypose_idx == rhs.keypose_idx &&
    lhs.viewpoints_pos == rhs.viewpoints_pos &&
    lhs.viewpoints_yaw == rhs.viewpoints_yaw &&
    lhs.viewpoints_visib_num == rhs.viewpoints_visib_num &&
    lhs.box_min_ == rhs.box_min_ &&
    lhs.box_max_ == rhs.box_max_ &&
    lhs.paths == rhs.paths &&
    lhs.costs == rhs.costs &&
    lhs.path_to_home_3 == rhs.path_to_home_3 &&
    lhs.path_to_home_4 == rhs.path_to_home_4 &&
    lhs.cost_to_home == rhs.cost_to_home &&
    lhs.topo_blacklist == rhs.topo_blacklist &&
    lhs.ftr_blacklist == rhs.ftr_blacklist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::FrontierMsg_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::FrontierMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca213f9395670f68c3f0d4e819744694";
  }

  static const char* value(const ::quadrotor_msgs::FrontierMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca213f9395670f68ULL;
  static const uint64_t static_value2 = 0xc3f0d4e819744694ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/FrontierMsg";
  }

  static const char* value(const ::quadrotor_msgs::FrontierMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# -----------------------\n"
"FtrPointArray[] cells\n"
"FtrPointArray[] filtered_cells\n"
"geometry_msgs/Point[] average\n"
"geometry_msgs/Point[] normal\n"
"uint16[] id\n"
"uint16[] keypose_idx\n"
"# view points for each frontier\n"
"FtrPointArray[] viewpoints_pos\n"
"std_msgs/Float32MultiArray[] viewpoints_yaw\n"
"std_msgs/UInt16MultiArray[] viewpoints_visib_num\n"
"geometry_msgs/Point[] box_min_\n"
"geometry_msgs/Point[] box_max_\n"
"# path & costs between frontiers\n"
"FtrPathArray[] paths\n"
"std_msgs/Float32MultiArray[] costs\n"
"FtrPointArray[] path_to_home_3   # (x, y, z, state)\n"
"std_msgs/Float32MultiArray[] path_to_home_4\n"
"float32[] cost_to_home# (x, y, z, state)\n"
"std_msgs/UInt16MultiArray[] topo_blacklist\n"
"# frontier blacklist (can't reach)\n"
"geometry_msgs/Point[] ftr_blacklist\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: quadrotor_msgs/FtrPointArray\n"
"geometry_msgs/Point[] PointArray\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float32[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: std_msgs/UInt16MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"uint16[]            data        # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: quadrotor_msgs/FtrPathArray\n"
"FtrPointArray[] PathArray\n"
;
  }

  static const char* value(const ::quadrotor_msgs::FrontierMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cells);
      stream.next(m.filtered_cells);
      stream.next(m.average);
      stream.next(m.normal);
      stream.next(m.id);
      stream.next(m.keypose_idx);
      stream.next(m.viewpoints_pos);
      stream.next(m.viewpoints_yaw);
      stream.next(m.viewpoints_visib_num);
      stream.next(m.box_min_);
      stream.next(m.box_max_);
      stream.next(m.paths);
      stream.next(m.costs);
      stream.next(m.path_to_home_3);
      stream.next(m.path_to_home_4);
      stream.next(m.cost_to_home);
      stream.next(m.topo_blacklist);
      stream.next(m.ftr_blacklist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrontierMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::FrontierMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::FrontierMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cells[]" << std::endl;
    for (size_t i = 0; i < v.cells.size(); ++i)
    {
      s << indent << "  cells[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> >::stream(s, indent + "    ", v.cells[i]);
    }
    s << indent << "filtered_cells[]" << std::endl;
    for (size_t i = 0; i < v.filtered_cells.size(); ++i)
    {
      s << indent << "  filtered_cells[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> >::stream(s, indent + "    ", v.filtered_cells[i]);
    }
    s << indent << "average[]" << std::endl;
    for (size_t i = 0; i < v.average.size(); ++i)
    {
      s << indent << "  average[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.average[i]);
    }
    s << indent << "normal[]" << std::endl;
    for (size_t i = 0; i < v.normal.size(); ++i)
    {
      s << indent << "  normal[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.normal[i]);
    }
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "keypose_idx[]" << std::endl;
    for (size_t i = 0; i < v.keypose_idx.size(); ++i)
    {
      s << indent << "  keypose_idx[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.keypose_idx[i]);
    }
    s << indent << "viewpoints_pos[]" << std::endl;
    for (size_t i = 0; i < v.viewpoints_pos.size(); ++i)
    {
      s << indent << "  viewpoints_pos[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> >::stream(s, indent + "    ", v.viewpoints_pos[i]);
    }
    s << indent << "viewpoints_yaw[]" << std::endl;
    for (size_t i = 0; i < v.viewpoints_yaw.size(); ++i)
    {
      s << indent << "  viewpoints_yaw[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.viewpoints_yaw[i]);
    }
    s << indent << "viewpoints_visib_num[]" << std::endl;
    for (size_t i = 0; i < v.viewpoints_visib_num.size(); ++i)
    {
      s << indent << "  viewpoints_visib_num[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::UInt16MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.viewpoints_visib_num[i]);
    }
    s << indent << "box_min_[]" << std::endl;
    for (size_t i = 0; i < v.box_min_.size(); ++i)
    {
      s << indent << "  box_min_[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.box_min_[i]);
    }
    s << indent << "box_max_[]" << std::endl;
    for (size_t i = 0; i < v.box_max_.size(); ++i)
    {
      s << indent << "  box_max_[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.box_max_[i]);
    }
    s << indent << "paths[]" << std::endl;
    for (size_t i = 0; i < v.paths.size(); ++i)
    {
      s << indent << "  paths[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> >::stream(s, indent + "    ", v.paths[i]);
    }
    s << indent << "costs[]" << std::endl;
    for (size_t i = 0; i < v.costs.size(); ++i)
    {
      s << indent << "  costs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.costs[i]);
    }
    s << indent << "path_to_home_3[]" << std::endl;
    for (size_t i = 0; i < v.path_to_home_3.size(); ++i)
    {
      s << indent << "  path_to_home_3[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> >::stream(s, indent + "    ", v.path_to_home_3[i]);
    }
    s << indent << "path_to_home_4[]" << std::endl;
    for (size_t i = 0; i < v.path_to_home_4.size(); ++i)
    {
      s << indent << "  path_to_home_4[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.path_to_home_4[i]);
    }
    s << indent << "cost_to_home[]" << std::endl;
    for (size_t i = 0; i < v.cost_to_home.size(); ++i)
    {
      s << indent << "  cost_to_home[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cost_to_home[i]);
    }
    s << indent << "topo_blacklist[]" << std::endl;
    for (size_t i = 0; i < v.topo_blacklist.size(); ++i)
    {
      s << indent << "  topo_blacklist[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::UInt16MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.topo_blacklist[i]);
    }
    s << indent << "ftr_blacklist[]" << std::endl;
    for (size_t i = 0; i < v.ftr_blacklist.size(); ++i)
    {
      s << indent << "  ftr_blacklist[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.ftr_blacklist[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_FRONTIERMSG_H
