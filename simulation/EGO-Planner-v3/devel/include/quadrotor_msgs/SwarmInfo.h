// Generated by gencpp from file quadrotor_msgs/SwarmInfo.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_SWARMINFO_H
#define QUADROTOR_MSGS_MESSAGE_SWARMINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct SwarmInfo_
{
  typedef SwarmInfo_<ContainerAllocator> Type;

  SwarmInfo_()
    : swarm_id(0)
    , robot_ids()
    , leader_id(0)  {
    }
  SwarmInfo_(const ContainerAllocator& _alloc)
    : swarm_id(0)
    , robot_ids(_alloc)
    , leader_id(0)  {
  (void)_alloc;
    }



   typedef int32_t _swarm_id_type;
  _swarm_id_type swarm_id;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _robot_ids_type;
  _robot_ids_type robot_ids;

   typedef int32_t _leader_id_type;
  _leader_id_type leader_id;





  typedef boost::shared_ptr< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> const> ConstPtr;

}; // struct SwarmInfo_

typedef ::quadrotor_msgs::SwarmInfo_<std::allocator<void> > SwarmInfo;

typedef boost::shared_ptr< ::quadrotor_msgs::SwarmInfo > SwarmInfoPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::SwarmInfo const> SwarmInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::SwarmInfo_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::SwarmInfo_<ContainerAllocator2> & rhs)
{
  return lhs.swarm_id == rhs.swarm_id &&
    lhs.robot_ids == rhs.robot_ids &&
    lhs.leader_id == rhs.leader_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::SwarmInfo_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::SwarmInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e58f24709b97dba610bf92bfa971d6d";
  }

  static const char* value(const ::quadrotor_msgs::SwarmInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e58f24709b97dbaULL;
  static const uint64_t static_value2 = 0x610bf92bfa971d6dULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/SwarmInfo";
  }

  static const char* value(const ::quadrotor_msgs::SwarmInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 swarm_id\n"
"int32[] robot_ids\n"
"int32 leader_id\n"
;
  }

  static const char* value(const ::quadrotor_msgs::SwarmInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.swarm_id);
      stream.next(m.robot_ids);
      stream.next(m.leader_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SwarmInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::SwarmInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::SwarmInfo_<ContainerAllocator>& v)
  {
    s << indent << "swarm_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.swarm_id);
    s << indent << "robot_ids[]" << std::endl;
    for (size_t i = 0; i < v.robot_ids.size(); ++i)
    {
      s << indent << "  robot_ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.robot_ids[i]);
    }
    s << indent << "leader_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.leader_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_SWARMINFO_H
