// Generated by gencpp from file quadrotor_msgs/FtrPathArray.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_FTRPATHARRAY_H
#define QUADROTOR_MSGS_MESSAGE_FTRPATHARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <quadrotor_msgs/FtrPointArray.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct FtrPathArray_
{
  typedef FtrPathArray_<ContainerAllocator> Type;

  FtrPathArray_()
    : PathArray()  {
    }
  FtrPathArray_(const ContainerAllocator& _alloc)
    : PathArray(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> >::other >  _PathArray_type;
  _PathArray_type PathArray;





  typedef boost::shared_ptr< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> const> ConstPtr;

}; // struct FtrPathArray_

typedef ::quadrotor_msgs::FtrPathArray_<std::allocator<void> > FtrPathArray;

typedef boost::shared_ptr< ::quadrotor_msgs::FtrPathArray > FtrPathArrayPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::FtrPathArray const> FtrPathArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::FtrPathArray_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::FtrPathArray_<ContainerAllocator2> & rhs)
{
  return lhs.PathArray == rhs.PathArray;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::FtrPathArray_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::FtrPathArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d168064edf658ded54eac8a732d98b8f";
  }

  static const char* value(const ::quadrotor_msgs::FtrPathArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd168064edf658dedULL;
  static const uint64_t static_value2 = 0x54eac8a732d98b8fULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/FtrPathArray";
  }

  static const char* value(const ::quadrotor_msgs::FtrPathArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "FtrPointArray[] PathArray\n"
"\n"
"================================================================================\n"
"MSG: quadrotor_msgs/FtrPointArray\n"
"geometry_msgs/Point[] PointArray\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::quadrotor_msgs::FtrPathArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.PathArray);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FtrPathArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::FtrPathArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::FtrPathArray_<ContainerAllocator>& v)
  {
    s << indent << "PathArray[]" << std::endl;
    for (size_t i = 0; i < v.PathArray.size(); ++i)
    {
      s << indent << "  PathArray[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::quadrotor_msgs::FtrPointArray_<ContainerAllocator> >::stream(s, indent + "    ", v.PathArray[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_FTRPATHARRAY_H
