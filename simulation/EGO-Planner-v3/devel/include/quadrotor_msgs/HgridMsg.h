// Generated by gencpp from file quadrotor_msgs/HgridMsg.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_HGRIDMSG_H
#define QUADROTOR_MSGS_MESSAGE_HGRIDMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/UInt16MultiArray.h>
#include <std_msgs/UInt16MultiArray.h>
#include <std_msgs/UInt16MultiArray.h>
#include <std_msgs/UInt16MultiArray.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct HgridMsg_
{
  typedef HgridMsg_<ContainerAllocator> Type;

  HgridMsg_()
    : header()
    , recv(false)
    , id()
    , local_id()
    , unknown_num()
    , frontier_num()
    , center()
    , frontier_cell_nums()
    , contained_frontier_ids()
    , is_updated()
    , need_divide()
    , active()
    , is_prev_relevant()
    , is_cur_relevant()
    , is_covered()
    , relevant_id()
    , relevant_map()
    , min()
    , max()
    , resolution()
    , grid_size(0.0)
    , multi_layer_hgrid(false)  {
    }
  HgridMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , recv(false)
    , id(_alloc)
    , local_id(_alloc)
    , unknown_num(_alloc)
    , frontier_num(_alloc)
    , center(_alloc)
    , frontier_cell_nums(_alloc)
    , contained_frontier_ids(_alloc)
    , is_updated(_alloc)
    , need_divide(_alloc)
    , active(_alloc)
    , is_prev_relevant(_alloc)
    , is_cur_relevant(_alloc)
    , is_covered(_alloc)
    , relevant_id(_alloc)
    , relevant_map(_alloc)
    , min(_alloc)
    , max(_alloc)
    , resolution(_alloc)
    , grid_size(0.0)
    , multi_layer_hgrid(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _recv_type;
  _recv_type recv;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _id_type;
  _id_type id;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _local_id_type;
  _local_id_type local_id;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _unknown_num_type;
  _unknown_num_type unknown_num;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _frontier_num_type;
  _frontier_num_type frontier_num;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _center_type;
  _center_type center;

   typedef std::vector< ::std_msgs::UInt16MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::UInt16MultiArray_<ContainerAllocator> >::other >  _frontier_cell_nums_type;
  _frontier_cell_nums_type frontier_cell_nums;

   typedef std::vector< ::std_msgs::UInt16MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::UInt16MultiArray_<ContainerAllocator> >::other >  _contained_frontier_ids_type;
  _contained_frontier_ids_type contained_frontier_ids;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _is_updated_type;
  _is_updated_type is_updated;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _need_divide_type;
  _need_divide_type need_divide;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _active_type;
  _active_type active;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _is_prev_relevant_type;
  _is_prev_relevant_type is_prev_relevant;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _is_cur_relevant_type;
  _is_cur_relevant_type is_cur_relevant;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _is_covered_type;
  _is_covered_type is_covered;

   typedef  ::std_msgs::UInt16MultiArray_<ContainerAllocator>  _relevant_id_type;
  _relevant_id_type relevant_id;

   typedef  ::std_msgs::UInt16MultiArray_<ContainerAllocator>  _relevant_map_type;
  _relevant_map_type relevant_map;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _min_type;
  _min_type min;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _max_type;
  _max_type max;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _resolution_type;
  _resolution_type resolution;

   typedef float _grid_size_type;
  _grid_size_type grid_size;

   typedef uint8_t _multi_layer_hgrid_type;
  _multi_layer_hgrid_type multi_layer_hgrid;





  typedef boost::shared_ptr< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> const> ConstPtr;

}; // struct HgridMsg_

typedef ::quadrotor_msgs::HgridMsg_<std::allocator<void> > HgridMsg;

typedef boost::shared_ptr< ::quadrotor_msgs::HgridMsg > HgridMsgPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::HgridMsg const> HgridMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::HgridMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::HgridMsg_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::HgridMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.recv == rhs.recv &&
    lhs.id == rhs.id &&
    lhs.local_id == rhs.local_id &&
    lhs.unknown_num == rhs.unknown_num &&
    lhs.frontier_num == rhs.frontier_num &&
    lhs.center == rhs.center &&
    lhs.frontier_cell_nums == rhs.frontier_cell_nums &&
    lhs.contained_frontier_ids == rhs.contained_frontier_ids &&
    lhs.is_updated == rhs.is_updated &&
    lhs.need_divide == rhs.need_divide &&
    lhs.active == rhs.active &&
    lhs.is_prev_relevant == rhs.is_prev_relevant &&
    lhs.is_cur_relevant == rhs.is_cur_relevant &&
    lhs.is_covered == rhs.is_covered &&
    lhs.relevant_id == rhs.relevant_id &&
    lhs.relevant_map == rhs.relevant_map &&
    lhs.min == rhs.min &&
    lhs.max == rhs.max &&
    lhs.resolution == rhs.resolution &&
    lhs.grid_size == rhs.grid_size &&
    lhs.multi_layer_hgrid == rhs.multi_layer_hgrid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::HgridMsg_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::HgridMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d287d82d0713c1a695d6c48be1e56cc3";
  }

  static const char* value(const ::quadrotor_msgs::HgridMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd287d82d0713c1a6ULL;
  static const uint64_t static_value2 = 0x95d6c48be1e56cc3ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/HgridMsg";
  }

  static const char* value(const ::quadrotor_msgs::HgridMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"bool recv\n"
"\n"
"# every single grid data (GridInfo)\n"
"uint16[] id\n"
"uint16[] local_id\n"
"uint16[] unknown_num  #\n"
"uint16[] frontier_num # no use\n"
"geometry_msgs/Point[] center\n"
"std_msgs/UInt16MultiArray[] frontier_cell_nums\n"
"std_msgs/UInt16MultiArray[] contained_frontier_ids\n"
"bool[] is_updated\n"
"bool[] need_divide\n"
"bool[] active\n"
"bool[] is_prev_relevant\n"
"bool[] is_cur_relevant\n"
"bool[] is_covered\n"
"\n"
"# multy grid data (UniformGrid)\n"
"std_msgs/UInt16MultiArray relevant_id\n"
"std_msgs/UInt16MultiArray relevant_map\n"
"geometry_msgs/Point min\n"
"geometry_msgs/Point max\n"
"geometry_msgs/Point resolution\n"
"float32 grid_size\n"
"bool multi_layer_hgrid\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt16MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"uint16[]            data        # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
;
  }

  static const char* value(const ::quadrotor_msgs::HgridMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.recv);
      stream.next(m.id);
      stream.next(m.local_id);
      stream.next(m.unknown_num);
      stream.next(m.frontier_num);
      stream.next(m.center);
      stream.next(m.frontier_cell_nums);
      stream.next(m.contained_frontier_ids);
      stream.next(m.is_updated);
      stream.next(m.need_divide);
      stream.next(m.active);
      stream.next(m.is_prev_relevant);
      stream.next(m.is_cur_relevant);
      stream.next(m.is_covered);
      stream.next(m.relevant_id);
      stream.next(m.relevant_map);
      stream.next(m.min);
      stream.next(m.max);
      stream.next(m.resolution);
      stream.next(m.grid_size);
      stream.next(m.multi_layer_hgrid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HgridMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::HgridMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::HgridMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "recv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recv);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "local_id[]" << std::endl;
    for (size_t i = 0; i < v.local_id.size(); ++i)
    {
      s << indent << "  local_id[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.local_id[i]);
    }
    s << indent << "unknown_num[]" << std::endl;
    for (size_t i = 0; i < v.unknown_num.size(); ++i)
    {
      s << indent << "  unknown_num[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.unknown_num[i]);
    }
    s << indent << "frontier_num[]" << std::endl;
    for (size_t i = 0; i < v.frontier_num.size(); ++i)
    {
      s << indent << "  frontier_num[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.frontier_num[i]);
    }
    s << indent << "center[]" << std::endl;
    for (size_t i = 0; i < v.center.size(); ++i)
    {
      s << indent << "  center[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.center[i]);
    }
    s << indent << "frontier_cell_nums[]" << std::endl;
    for (size_t i = 0; i < v.frontier_cell_nums.size(); ++i)
    {
      s << indent << "  frontier_cell_nums[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::UInt16MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.frontier_cell_nums[i]);
    }
    s << indent << "contained_frontier_ids[]" << std::endl;
    for (size_t i = 0; i < v.contained_frontier_ids.size(); ++i)
    {
      s << indent << "  contained_frontier_ids[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::UInt16MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.contained_frontier_ids[i]);
    }
    s << indent << "is_updated[]" << std::endl;
    for (size_t i = 0; i < v.is_updated.size(); ++i)
    {
      s << indent << "  is_updated[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.is_updated[i]);
    }
    s << indent << "need_divide[]" << std::endl;
    for (size_t i = 0; i < v.need_divide.size(); ++i)
    {
      s << indent << "  need_divide[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.need_divide[i]);
    }
    s << indent << "active[]" << std::endl;
    for (size_t i = 0; i < v.active.size(); ++i)
    {
      s << indent << "  active[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.active[i]);
    }
    s << indent << "is_prev_relevant[]" << std::endl;
    for (size_t i = 0; i < v.is_prev_relevant.size(); ++i)
    {
      s << indent << "  is_prev_relevant[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.is_prev_relevant[i]);
    }
    s << indent << "is_cur_relevant[]" << std::endl;
    for (size_t i = 0; i < v.is_cur_relevant.size(); ++i)
    {
      s << indent << "  is_cur_relevant[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.is_cur_relevant[i]);
    }
    s << indent << "is_covered[]" << std::endl;
    for (size_t i = 0; i < v.is_covered.size(); ++i)
    {
      s << indent << "  is_covered[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.is_covered[i]);
    }
    s << indent << "relevant_id: ";
    s << std::endl;
    Printer< ::std_msgs::UInt16MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.relevant_id);
    s << indent << "relevant_map: ";
    s << std::endl;
    Printer< ::std_msgs::UInt16MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.relevant_map);
    s << indent << "min: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.min);
    s << indent << "max: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.max);
    s << indent << "resolution: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.resolution);
    s << indent << "grid_size: ";
    Printer<float>::stream(s, indent + "  ", v.grid_size);
    s << indent << "multi_layer_hgrid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.multi_layer_hgrid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_HGRIDMSG_H
