// Generated by gencpp from file quadrotor_msgs/OccMap3d.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_OCCMAP3D_H
#define QUADROTOR_MSGS_MESSAGE_OCCMAP3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct OccMap3d_
{
  typedef OccMap3d_<ContainerAllocator> Type;

  OccMap3d_()
    : header()
    , resolution(0.0)
    , inflate_size(0)
    , size_x(0)
    , size_y(0)
    , size_z(0)
    , offset_x(0)
    , offset_y(0)
    , offset_z(0)
    , data()
    , esdf()  {
    }
  OccMap3d_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , resolution(0.0)
    , inflate_size(0)
    , size_x(0)
    , size_y(0)
    , size_z(0)
    , offset_x(0)
    , offset_y(0)
    , offset_z(0)
    , data(_alloc)
    , esdf(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _resolution_type;
  _resolution_type resolution;

   typedef int16_t _inflate_size_type;
  _inflate_size_type inflate_size;

   typedef int16_t _size_x_type;
  _size_x_type size_x;

   typedef int16_t _size_y_type;
  _size_y_type size_y;

   typedef int16_t _size_z_type;
  _size_z_type size_z;

   typedef int16_t _offset_x_type;
  _offset_x_type offset_x;

   typedef int16_t _offset_y_type;
  _offset_y_type offset_y;

   typedef int16_t _offset_z_type;
  _offset_z_type offset_z;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _data_type;
  _data_type data;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _esdf_type;
  _esdf_type esdf;





  typedef boost::shared_ptr< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> const> ConstPtr;

}; // struct OccMap3d_

typedef ::quadrotor_msgs::OccMap3d_<std::allocator<void> > OccMap3d;

typedef boost::shared_ptr< ::quadrotor_msgs::OccMap3d > OccMap3dPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::OccMap3d const> OccMap3dConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::OccMap3d_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::OccMap3d_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::OccMap3d_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.resolution == rhs.resolution &&
    lhs.inflate_size == rhs.inflate_size &&
    lhs.size_x == rhs.size_x &&
    lhs.size_y == rhs.size_y &&
    lhs.size_z == rhs.size_z &&
    lhs.offset_x == rhs.offset_x &&
    lhs.offset_y == rhs.offset_y &&
    lhs.offset_z == rhs.offset_z &&
    lhs.data == rhs.data &&
    lhs.esdf == rhs.esdf;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::OccMap3d_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::OccMap3d_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fb1de7c912d694532f4f1aa26096e06";
  }

  static const char* value(const ::quadrotor_msgs::OccMap3d_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fb1de7c912d6945ULL;
  static const uint64_t static_value2 = 0x32f4f1aa26096e06ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/OccMap3d";
  }

  static const char* value(const ::quadrotor_msgs::OccMap3d_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float32 resolution\n"
"int16 inflate_size\n"
"int16 size_x\n"
"int16 size_y\n"
"int16 size_z\n"
"int16 offset_x\n"
"int16 offset_y\n"
"int16 offset_z\n"
"\n"
"int8[] data\n"
"float64[] esdf\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::quadrotor_msgs::OccMap3d_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.resolution);
      stream.next(m.inflate_size);
      stream.next(m.size_x);
      stream.next(m.size_y);
      stream.next(m.size_z);
      stream.next(m.offset_x);
      stream.next(m.offset_y);
      stream.next(m.offset_z);
      stream.next(m.data);
      stream.next(m.esdf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OccMap3d_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::OccMap3d_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::OccMap3d_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
    s << indent << "inflate_size: ";
    Printer<int16_t>::stream(s, indent + "  ", v.inflate_size);
    s << indent << "size_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.size_x);
    s << indent << "size_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.size_y);
    s << indent << "size_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.size_z);
    s << indent << "offset_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.offset_x);
    s << indent << "offset_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.offset_y);
    s << indent << "offset_z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.offset_z);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "esdf[]" << std::endl;
    for (size_t i = 0; i < v.esdf.size(); ++i)
    {
      s << indent << "  esdf[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.esdf[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_OCCMAP3D_H
