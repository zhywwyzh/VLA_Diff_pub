// Generated by gencpp from file traj_utils/WayPointInfo.msg
// DO NOT EDIT!


#ifndef TRAJ_UTILS_MESSAGE_WAYPOINTINFO_H
#define TRAJ_UTILS_MESSAGE_WAYPOINTINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace traj_utils
{
template <class ContainerAllocator>
struct WayPointInfo_
{
  typedef WayPointInfo_<ContainerAllocator> Type;

  WayPointInfo_()
    : drone_id(0)
    , waypoint_id(0)
    , waypoint_pos()  {
      waypoint_pos.assign(0.0);
  }
  WayPointInfo_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , waypoint_id(0)
    , waypoint_pos()  {
  (void)_alloc;
      waypoint_pos.assign(0.0);
  }



   typedef int16_t _drone_id_type;
  _drone_id_type drone_id;

   typedef int16_t _waypoint_id_type;
  _waypoint_id_type waypoint_id;

   typedef boost::array<float, 3>  _waypoint_pos_type;
  _waypoint_pos_type waypoint_pos;





  typedef boost::shared_ptr< ::traj_utils::WayPointInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traj_utils::WayPointInfo_<ContainerAllocator> const> ConstPtr;

}; // struct WayPointInfo_

typedef ::traj_utils::WayPointInfo_<std::allocator<void> > WayPointInfo;

typedef boost::shared_ptr< ::traj_utils::WayPointInfo > WayPointInfoPtr;
typedef boost::shared_ptr< ::traj_utils::WayPointInfo const> WayPointInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traj_utils::WayPointInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traj_utils::WayPointInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traj_utils::WayPointInfo_<ContainerAllocator1> & lhs, const ::traj_utils::WayPointInfo_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id == rhs.drone_id &&
    lhs.waypoint_id == rhs.waypoint_id &&
    lhs.waypoint_pos == rhs.waypoint_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traj_utils::WayPointInfo_<ContainerAllocator1> & lhs, const ::traj_utils::WayPointInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traj_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traj_utils::WayPointInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_utils::WayPointInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::WayPointInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::WayPointInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::WayPointInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::WayPointInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traj_utils::WayPointInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3e1a39e25f76f15df8b36b8cc49d0af";
  }

  static const char* value(const ::traj_utils::WayPointInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3e1a39e25f76f15ULL;
  static const uint64_t static_value2 = 0xdf8b36b8cc49d0afULL;
};

template<class ContainerAllocator>
struct DataType< ::traj_utils::WayPointInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_utils/WayPointInfo";
  }

  static const char* value(const ::traj_utils::WayPointInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traj_utils::WayPointInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 drone_id\n"
"int16 waypoint_id\n"
"float32[3] waypoint_pos\n"
;
  }

  static const char* value(const ::traj_utils::WayPointInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traj_utils::WayPointInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.waypoint_id);
      stream.next(m.waypoint_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WayPointInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traj_utils::WayPointInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traj_utils::WayPointInfo_<ContainerAllocator>& v)
  {
    s << indent << "drone_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "waypoint_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.waypoint_id);
    s << indent << "waypoint_pos[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_pos.size(); ++i)
    {
      s << indent << "  waypoint_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.waypoint_pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJ_UTILS_MESSAGE_WAYPOINTINFO_H
