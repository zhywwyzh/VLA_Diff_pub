// Generated by gencpp from file quadrotor_msgs/Instruction.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_INSTRUCTION_H
#define QUADROTOR_MSGS_MESSAGE_INSTRUCTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct Instruction_
{
  typedef Instruction_<ContainerAllocator> Type;

  Instruction_()
    : robot_id(0)
    , instruction_type(0)
    , target_position()
    , src_drone_ids()
    , tar_drone_ids()  {
      target_position.assign(0.0);
  }
  Instruction_(const ContainerAllocator& _alloc)
    : robot_id(0)
    , instruction_type(0)
    , target_position()
    , src_drone_ids(_alloc)
    , tar_drone_ids(_alloc)  {
  (void)_alloc;
      target_position.assign(0.0);
  }



   typedef uint8_t _robot_id_type;
  _robot_id_type robot_id;

   typedef uint8_t _instruction_type_type;
  _instruction_type_type instruction_type;

   typedef boost::array<float, 3>  _target_position_type;
  _target_position_type target_position;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _src_drone_ids_type;
  _src_drone_ids_type src_drone_ids;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _tar_drone_ids_type;
  _tar_drone_ids_type tar_drone_ids;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TURN_GOAL)
  #undef TURN_GOAL
#endif
#if defined(_WIN32) && defined(TURN_EXPLORE)
  #undef TURN_EXPLORE
#endif
#if defined(_WIN32) && defined(TURN_PATROL)
  #undef TURN_PATROL
#endif
#if defined(_WIN32) && defined(TURN_HIT)
  #undef TURN_HIT
#endif
#if defined(_WIN32) && defined(GO_HOME)
  #undef GO_HOME
#endif
#if defined(_WIN32) && defined(TURN_EGO_GOAL)
  #undef TURN_EGO_GOAL
#endif
#if defined(_WIN32) && defined(SHARE_MAP)
  #undef SHARE_MAP
#endif
#if defined(_WIN32) && defined(RESET_EXPLORE_AREA)
  #undef RESET_EXPLORE_AREA
#endif
#if defined(_WIN32) && defined(MAP_MERGE_REQUEST)
  #undef MAP_MERGE_REQUEST
#endif
#if defined(_WIN32) && defined(MAP_CIRCULATE)
  #undef MAP_CIRCULATE
#endif

  enum {
    TURN_GOAL = 1u,
    TURN_EXPLORE = 2u,
    TURN_PATROL = 3u,
    TURN_HIT = 4u,
    GO_HOME = 5u,
    TURN_EGO_GOAL = 6u,
    SHARE_MAP = 7u,
    RESET_EXPLORE_AREA = 8u,
    MAP_MERGE_REQUEST = 9u,
    MAP_CIRCULATE = 10u,
  };


  typedef boost::shared_ptr< ::quadrotor_msgs::Instruction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::Instruction_<ContainerAllocator> const> ConstPtr;

}; // struct Instruction_

typedef ::quadrotor_msgs::Instruction_<std::allocator<void> > Instruction;

typedef boost::shared_ptr< ::quadrotor_msgs::Instruction > InstructionPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::Instruction const> InstructionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::Instruction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::Instruction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::Instruction_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::Instruction_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id &&
    lhs.instruction_type == rhs.instruction_type &&
    lhs.target_position == rhs.target_position &&
    lhs.src_drone_ids == rhs.src_drone_ids &&
    lhs.tar_drone_ids == rhs.tar_drone_ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::Instruction_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::Instruction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::Instruction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::Instruction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::Instruction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::Instruction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::Instruction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::Instruction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::Instruction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6740b6e4e6245eb3348061673116e30f";
  }

  static const char* value(const ::quadrotor_msgs::Instruction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6740b6e4e6245eb3ULL;
  static const uint64_t static_value2 = 0x348061673116e30fULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::Instruction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/Instruction";
  }

  static const char* value(const ::quadrotor_msgs::Instruction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::Instruction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 robot_id\n"
"uint8 instruction_type\n"
"float32[3] target_position\n"
"\n"
"# map merge request\n"
"uint16[] src_drone_ids\n"
"uint16[] tar_drone_ids\n"
"\n"
"#definations for instruction_type\n"
"uint8 TURN_GOAL = 1\n"
"uint8 TURN_EXPLORE = 2\n"
"uint8 TURN_PATROL = 3\n"
"uint8 TURN_HIT = 4\n"
"uint8 GO_HOME = 5\n"
"uint8 TURN_EGO_GOAL = 6\n"
"uint8 SHARE_MAP = 7\n"
"uint8 RESET_EXPLORE_AREA = 8\n"
"uint8 MAP_MERGE_REQUEST = 9\n"
"uint8 MAP_CIRCULATE = 10\n"
;
  }

  static const char* value(const ::quadrotor_msgs::Instruction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::Instruction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.instruction_type);
      stream.next(m.target_position);
      stream.next(m.src_drone_ids);
      stream.next(m.tar_drone_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Instruction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::Instruction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::Instruction_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_id);
    s << indent << "instruction_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.instruction_type);
    s << indent << "target_position[]" << std::endl;
    for (size_t i = 0; i < v.target_position.size(); ++i)
    {
      s << indent << "  target_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.target_position[i]);
    }
    s << indent << "src_drone_ids[]" << std::endl;
    for (size_t i = 0; i < v.src_drone_ids.size(); ++i)
    {
      s << indent << "  src_drone_ids[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.src_drone_ids[i]);
    }
    s << indent << "tar_drone_ids[]" << std::endl;
    for (size_t i = 0; i < v.tar_drone_ids.size(); ++i)
    {
      s << indent << "  tar_drone_ids[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.tar_drone_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_INSTRUCTION_H
