// Generated by gencpp from file traj_utils/CarTraj.msg
// DO NOT EDIT!


#ifndef TRAJ_UTILS_MESSAGE_CARTRAJ_H
#define TRAJ_UTILS_MESSAGE_CARTRAJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace traj_utils
{
template <class ContainerAllocator>
struct CarTraj_
{
  typedef CarTraj_<ContainerAllocator> Type;

  CarTraj_()
    : start_stamp()
    , dt(0.0)
    , X()
    , id(0)  {
    }
  CarTraj_(const ContainerAllocator& _alloc)
    : start_stamp()
    , dt(0.0)
    , X(_alloc)
    , id(0)  {
  (void)_alloc;
    }



   typedef ros::Time _start_stamp_type;
  _start_stamp_type start_stamp;

   typedef double _dt_type;
  _dt_type dt;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _X_type;
  _X_type X;

   typedef int32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::traj_utils::CarTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::traj_utils::CarTraj_<ContainerAllocator> const> ConstPtr;

}; // struct CarTraj_

typedef ::traj_utils::CarTraj_<std::allocator<void> > CarTraj;

typedef boost::shared_ptr< ::traj_utils::CarTraj > CarTrajPtr;
typedef boost::shared_ptr< ::traj_utils::CarTraj const> CarTrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::traj_utils::CarTraj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::traj_utils::CarTraj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::traj_utils::CarTraj_<ContainerAllocator1> & lhs, const ::traj_utils::CarTraj_<ContainerAllocator2> & rhs)
{
  return lhs.start_stamp == rhs.start_stamp &&
    lhs.dt == rhs.dt &&
    lhs.X == rhs.X &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::traj_utils::CarTraj_<ContainerAllocator1> & lhs, const ::traj_utils::CarTraj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace traj_utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::traj_utils::CarTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::traj_utils::CarTraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::CarTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::traj_utils::CarTraj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::CarTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::traj_utils::CarTraj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::traj_utils::CarTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "951e389eb9cdbc57941969e38b64973a";
  }

  static const char* value(const ::traj_utils::CarTraj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x951e389eb9cdbc57ULL;
  static const uint64_t static_value2 = 0x941969e38b64973aULL;
};

template<class ContainerAllocator>
struct DataType< ::traj_utils::CarTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "traj_utils/CarTraj";
  }

  static const char* value(const ::traj_utils::CarTraj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::traj_utils::CarTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time start_stamp\n"
"float64 dt\n"
"float64[] X\n"
"int32 id\n"
;
  }

  static const char* value(const ::traj_utils::CarTraj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::traj_utils::CarTraj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_stamp);
      stream.next(m.dt);
      stream.next(m.X);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarTraj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::traj_utils::CarTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::traj_utils::CarTraj_<ContainerAllocator>& v)
  {
    s << indent << "start_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_stamp);
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
    s << indent << "X[]" << std::endl;
    for (size_t i = 0; i < v.X.size(); ++i)
    {
      s << indent << "  X[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.X[i]);
    }
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRAJ_UTILS_MESSAGE_CARTRAJ_H
