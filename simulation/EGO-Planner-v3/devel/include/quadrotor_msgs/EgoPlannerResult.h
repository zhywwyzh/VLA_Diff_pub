// Generated by gencpp from file quadrotor_msgs/EgoPlannerResult.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_EGOPLANNERRESULT_H
#define QUADROTOR_MSGS_MESSAGE_EGOPLANNERRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct EgoPlannerResult_
{
  typedef EgoPlannerResult_<ContainerAllocator> Type;

  EgoPlannerResult_()
    : planner_goal()
    , plan_times(0)
    , plan_status(false)
    , modify_status(false)  {
    }
  EgoPlannerResult_(const ContainerAllocator& _alloc)
    : planner_goal(_alloc)
    , plan_times(0)
    , plan_status(false)
    , modify_status(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _planner_goal_type;
  _planner_goal_type planner_goal;

   typedef int16_t _plan_times_type;
  _plan_times_type plan_times;

   typedef uint8_t _plan_status_type;
  _plan_status_type plan_status;

   typedef uint8_t _modify_status_type;
  _modify_status_type modify_status;





  typedef boost::shared_ptr< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> const> ConstPtr;

}; // struct EgoPlannerResult_

typedef ::quadrotor_msgs::EgoPlannerResult_<std::allocator<void> > EgoPlannerResult;

typedef boost::shared_ptr< ::quadrotor_msgs::EgoPlannerResult > EgoPlannerResultPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::EgoPlannerResult const> EgoPlannerResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator2> & rhs)
{
  return lhs.planner_goal == rhs.planner_goal &&
    lhs.plan_times == rhs.plan_times &&
    lhs.plan_status == rhs.plan_status &&
    lhs.modify_status == rhs.modify_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6cf40d72e8bfa9282deb6b127bfe25d";
  }

  static const char* value(const ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6cf40d72e8bfa92ULL;
  static const uint64_t static_value2 = 0x82deb6b127bfe25dULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/EgoPlannerResult";
  }

  static const char* value(const ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#data structure\n"
"geometry_msgs/Vector3 planner_goal\n"
"int16 plan_times\n"
"bool plan_status\n"
"bool modify_status\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.planner_goal);
      stream.next(m.plan_times);
      stream.next(m.plan_status);
      stream.next(m.modify_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EgoPlannerResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::EgoPlannerResult_<ContainerAllocator>& v)
  {
    s << indent << "planner_goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.planner_goal);
    s << indent << "plan_times: ";
    Printer<int16_t>::stream(s, indent + "  ", v.plan_times);
    s << indent << "plan_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.plan_status);
    s << indent << "modify_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.modify_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_EGOPLANNERRESULT_H
